!function(){var e=Handlebars.template,n=Handlebars.templates=Handlebars.templates||{};n["task_list.hbs"]=e(function(e,n,t,a,i){function o(e,n){var a,i="";return i+='\n  <section id="main">\n    <ul id="todo-list">\n      ',a=t.each.call(e,e.tasks,{hash:{},inverse:p.noop,fn:p.programWithDepth(2,l,n,e),data:n}),(a||0===a)&&(i+=a),i+="\n    </ul>\n  </section>\n"}function l(e,n,a){var i,o,l="";return l+="\n        <!-- Add a new Backbone.Views.TaskItemView for the task model into the current NestingView -->\n        ",o={hash:{task:e},data:n},l+=c((i=t.addSubViewTo||e.addSubViewTo,i?i.call(e,a.thisView,"TaskItemView",o):h.call(e,"addSubViewTo",a.thisView,"TaskItemView",o)))+"\n      "}this.compilerInfo=[4,">= 1.0.0"],t=this.merge(t,e.helpers),i=i||{};var s,r,d="",h=t.helperMissing,c=this.escapeExpression,p=this,u="function";return d+='<header id="header">\n  <input id="new-todo" placeholder="What have you got to do?" autofocus>\n</header>\n\n',r=t["if"].call(n,(s=n.tasks,null==s||s===!1?s:s.length),{hash:{},inverse:p.noop,fn:p.program(1,o,i),data:i}),(r||0===r)&&(d+=r),d+='\n\n<footer id="footer">\n  <span id="todo-count">',(r=t.remainingCount)?r=r.call(n,{hash:{},data:i}):(r=n.remainingCount,r=typeof r===u?r.apply(n):r),d+=c(r)+' left</span>\n\n  <ul id="filters">\n    <li>\n      <a href="#">All</a>\n    </li>\n    <li>\n      <a href="#">Active</a>\n    </li>\n    <li>\n      <a href="#">Completed</a>\n    </li>\n  </ul>\n\n  <button id="clear-completed">Clear completed (',(r=t.completedCount)?r=r.call(n,{hash:{},data:i}):(r=n.completedCount,r=typeof r===u?r.apply(n):r),d+=c(r)+")</button>\n</footer>\n"}),n["task_item.hbs"]=e(function(e,n,t,a,i){function o(){return"checked"}this.compilerInfo=[4,">= 1.0.0"],t=this.merge(t,e.helpers),i=i||{};var l,s,r="",d=this,h="function",c=this.escapeExpression;return r+='<div class="view">\n  <input class="toggle" type="checkbox" ',s=t["if"].call(n,(l=n.task,null==l||l===!1?l:l.completed),{hash:{},inverse:d.noop,fn:d.program(1,o,i),data:i}),(s||0===s)&&(r+=s),r+=">\n  <label>"+c((l=n.task,l=null==l||l===!1?l:l.name,typeof l===h?l.apply(n):l))+'</label>\n  <button class="destroy"></button>\n</div>\n'})}();

;
// Generated by CoffeeScript 1.6.3
(function() {
  var _base, _base1, _base2, _base3, _base4, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (_base = window.Backbone).Models || (_base.Models = {});

  window.Backbone.Models.Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      _ref = Task.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Task.prototype.defaults = {
      title: '',
      completed: false
    };

    Task.prototype.toggle = function() {
      this.set('completed', !this.get('completed'));
      return this.save();
    };

    return Task;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base1 = window.Backbone).Collections || (_base1.Collections = {});

  Backbone.Collections.TaskCollection = (function(_super) {
    __extends(TaskCollection, _super);

    function TaskCollection() {
      _ref1 = TaskCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TaskCollection.prototype.model = Backbone.Models.Task;

    TaskCollection.prototype.clearCompleted = function() {
      return this.reset(this.active());
    };

    TaskCollection.prototype.byStatus = function(status) {
      if (status !== "all") {
        if (this[status] != null) {
          return this[status]();
        }
      }
      return this.models;
    };

    TaskCollection.prototype.completed = function() {
      return this.filter(function(todo) {
        return todo.get('completed');
      });
    };

    TaskCollection.prototype.active = function() {
      return this.without.apply(this, this.completed());
    };

    return TaskCollection;

  })(Backbone.Collection);

  window.Backbone || (window.Backbone = {});

  (_base2 = window.Backbone).Views || (_base2.Views = {});

  Backbone.Views.TaskListView = (function(_super) {
    __extends(TaskListView, _super);

    function TaskListView() {
      this.render = __bind(this.render, this);
      this.completedCount = __bind(this.completedCount, this);
      this.remainingCount = __bind(this.remainingCount, this);
      _ref2 = TaskListView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TaskListView.prototype.template = Handlebars.templates['task_list.hbs'];

    TaskListView.prototype.events = {
      'keypress #new-todo': 'addOnEnter',
      'click #filters a': 'setFilter',
      'click #clear-completed': 'clearCompleted'
    };

    TaskListView.prototype.initialize = function(options) {
      Handlebars.registerHelper('remainingCount', this.remainingCount);
      Handlebars.registerHelper('completedCount', this.completedCount);
      this.tasks = new Backbone.Collections.TaskCollection();
      this.tasks.on('change', this.render);
      this.tasks.on('destroy', this.render);
      this.tasks.on('reset', this.render);
      return this.render();
    };

    TaskListView.prototype.addOnEnter = function(event) {
      if (event.which === 13) {
        return this.addTask();
      }
    };

    TaskListView.prototype.addTask = function() {
      var name, task;
      name = $('#new-todo').val().trim();
      if (name.length > 0) {
        task = new Backbone.Models.Task();
        task.set('name', name);
        this.tasks.add(task);
        return this.render();
      }
    };

    TaskListView.prototype.setFilter = function(event) {
      this.filter = $(event.target).text().toLowerCase();
      return this.render();
    };

    TaskListView.prototype.clearCompleted = function() {
      return this.tasks.clearCompleted();
    };

    TaskListView.prototype.remainingCount = function() {
      var count, word;
      count = this.tasks.active().length;
      word = "items";
      if (count === 1) {
        word = "item";
      }
      return new Handlebars.SafeString("" + count + " " + word);
    };

    TaskListView.prototype.completedCount = function() {
      return this.tasks.completed().length;
    };

    TaskListView.prototype.render = function() {
      var tasks;
      tasks = this.tasks.models;
      if (this.filter != null) {
        tasks = this.tasks.byStatus(this.filter);
      }
      this.$el.html(this.template({
        thisView: this,
        tasks: tasks
      }));
      this.attachSubViews();
      return this;
    };

    TaskListView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return TaskListView;

  })(Backbone.Diorama.NestingView);

  window.Backbone || (window.Backbone = {});

  (_base3 = window.Backbone).Views || (_base3.Views = {});

  Backbone.Views.TaskItemView = (function(_super) {
    __extends(TaskItemView, _super);

    function TaskItemView() {
      this.setCompleted = __bind(this.setCompleted, this);
      this.remove = __bind(this.remove, this);
      this.render = __bind(this.render, this);
      _ref3 = TaskItemView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TaskItemView.prototype.template = Handlebars.templates['task_item.hbs'];

    TaskItemView.prototype.tagName = 'li';

    TaskItemView.prototype.events = {
      "click input": "setCompleted",
      "click .destroy": "clear"
    };

    TaskItemView.prototype.initialize = function(options) {
      this.model = options.task;
      this.model.on('change', this.render);
      this.model.on('destroy', this.remove);
      return this.render();
    };

    TaskItemView.prototype.render = function() {
      this.$el.html(this.template({
        task: this.model.toJSON()
      }));
      if (this.model.get('completed')) {
        this.$el.attr('class', 'completed');
      }
      return this;
    };

    TaskItemView.prototype.remove = function() {
      this.$el.remove();
      return this.stopListening();
    };

    TaskItemView.prototype.clear = function() {
      return this.model.destroy();
    };

    TaskItemView.prototype.setCompleted = function(event) {
      var isChecked;
      isChecked = $(event.target).is(":checked");
      return this.model.set('completed', isChecked);
    };

    TaskItemView.prototype.onClose = function() {
      return this.model.off('change', this.render);
    };

    return TaskItemView;

  })(Backbone.View);

  window.Backbone || (window.Backbone = {});

  (_base4 = window.Backbone).Controllers || (_base4.Controllers = {});

  Backbone.Controllers.TasksController = (function(_super) {
    __extends(TasksController, _super);

    function TasksController() {
      this.start = __bind(this.start, this);
      this.mainRegion = new Backbone.Diorama.ManagedRegion();
      $('#app').append(this.mainRegion.$el);
      this.start();
    }

    TasksController.prototype.start = function() {
      var taskListView;
      taskListView = new Backbone.Views.TaskListView();
      return this.mainRegion.showView(taskListView);
    };

    return TasksController;

  })(Backbone.Diorama.Controller);

}).call(this);
