(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['todo_list.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, options;
  buffer += "\n    ";
  options = {hash:{
    'task': (depth0)
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.subView),stack1 ? stack1.call(depth0, "TodoItemView", options) : helperMissing.call(depth0, "subView", "TodoItemView", options)))
    + "\n  ";
  return buffer;
  }

  buffer += "<h1>TodoList</h1>\n\n<ul>\n  ";
  stack1 = helpers.each.call(depth0, depth0.tasks, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n\n<input id=\"task-name\"/>\n<button id=\"add-task\" >Add a task</button>\n";
  return buffer;
  });
templates['todo_item.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, stack2, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  return "checked";
  }

  buffer += "<input type=\"checkbox\" ";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth0.task),stack1 == null || stack1 === false ? stack1 : stack1.completed), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "/>"
    + escapeExpression(((stack1 = ((stack1 = depth0.task),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n";
  return buffer;
  });
})();


(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['todo_list.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, options;
  buffer += "\n    ";
  options = {hash:{
    'task': (depth0)
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.subView),stack1 ? stack1.call(depth0, "TodoItemView", options) : helperMissing.call(depth0, "subView", "TodoItemView", options)))
    + "\n  ";
  return buffer;
  }

  buffer += "<h1>TodoList</h1>\n\n<ul>\n  ";
  stack1 = helpers.each.call(depth0, depth0.tasks, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n\n<input id=\"task-name\"/>\n<button id=\"add-task\" >Add a task</button>\n";
  return buffer;
  });
templates['todo_item.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, stack2, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  return "checked";
  }

  buffer += "<input type=\"checkbox\" ";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth0.task),stack1 == null || stack1 === false ? stack1 : stack1.completed), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "/>"
    + escapeExpression(((stack1 = ((stack1 = depth0.task),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n";
  return buffer;
  });
})();


// Generated by CoffeeScript 1.6.2
(function() {
  var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (_base = window.Backbone).Models || (_base.Models = {});

  window.Backbone.Models.Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      _ref = Task.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Task.prototype.defaults = {
      completed: false
    };

    return Task;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base1 = window.Backbone).Collections || (_base1.Collections = {});

  Backbone.Collections.TaskCollection = (function(_super) {
    __extends(TaskCollection, _super);

    function TaskCollection() {
      _ref1 = TaskCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TaskCollection.prototype.model = Backbone.Models.Task;

    return TaskCollection;

  })(Backbone.Collection);

  window.Backbone || (window.Backbone = {});

  (_base2 = window.Backbone).Views || (_base2.Views = {});

  Backbone.Views.TodoListView = (function(_super) {
    __extends(TodoListView, _super);

    function TodoListView() {
      this.render = __bind(this.render, this);      _ref2 = TodoListView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TodoListView.prototype.template = Handlebars.templates['todo_list.hbs'];

    TodoListView.prototype.events = {
      'click #add-task': 'addTask'
    };

    TodoListView.prototype.initialize = function(options) {
      this.tasks = new Backbone.Collections.TaskCollection();
      return this.render();
    };

    TodoListView.prototype.addTask = function() {
      var name, task;

      name = $('#task-name').val();
      if (name.length > 0) {
        task = new Backbone.Models.Task();
        task.set('name', name);
        this.tasks.add(task);
        return this.render();
      }
    };

    TodoListView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        tasks: this.tasks.models
      }));
      this.renderSubViews();
      return this;
    };

    TodoListView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return TodoListView;

  })(Backbone.Diorama.NestingView);

  window.Backbone || (window.Backbone = {});

  (_base3 = window.Backbone).Views || (_base3.Views = {});

  Backbone.Views.TodoItemView = (function(_super) {
    __extends(TodoItemView, _super);

    function TodoItemView() {
      this.setCompleted = __bind(this.setCompleted, this);
      this.render = __bind(this.render, this);      _ref3 = TodoItemView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TodoItemView.prototype.template = Handlebars.templates['todo_item.hbs'];

    TodoItemView.prototype.tagName = 'li';

    TodoItemView.prototype.events = {
      "click input": "setCompleted"
    };

    TodoItemView.prototype.initialize = function(options) {
      this.model = options.task;
      this.model.on('change', this.render);
      return this.render();
    };

    TodoItemView.prototype.render = function() {
      this.$el.html(this.template({
        task: this.model.toJSON()
      }));
      return this;
    };

    TodoItemView.prototype.setCompleted = function(event) {
      var isChecked;

      isChecked = $(event.target).is(":checked");
      return this.model.set('completed', isChecked);
    };

    TodoItemView.prototype.onClose = function() {
      return this.model.off('change', this.render);
    };

    return TodoItemView;

  })(Backbone.View);

  (_base4 = window.Backbone).Models || (_base4.Models = {});

  window.Backbone.Models.Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      _ref4 = Task.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Task.prototype.defaults = {
      completed: false
    };

    return Task;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base5 = window.Backbone).Collections || (_base5.Collections = {});

  Backbone.Collections.TaskCollection = (function(_super) {
    __extends(TaskCollection, _super);

    function TaskCollection() {
      _ref5 = TaskCollection.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    TaskCollection.prototype.model = Backbone.Models.Task;

    return TaskCollection;

  })(Backbone.Collection);

  window.Backbone || (window.Backbone = {});

  (_base6 = window.Backbone).Views || (_base6.Views = {});

  Backbone.Views.TodoListView = (function(_super) {
    __extends(TodoListView, _super);

    function TodoListView() {
      this.render = __bind(this.render, this);      _ref6 = TodoListView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    TodoListView.prototype.template = Handlebars.templates['todo_list.hbs'];

    TodoListView.prototype.events = {
      'click #add-task': 'addTask'
    };

    TodoListView.prototype.initialize = function(options) {
      this.tasks = new Backbone.Collections.TaskCollection();
      return this.render();
    };

    TodoListView.prototype.addTask = function() {
      var name, task;

      name = $('#task-name').val();
      if (name.length > 0) {
        task = new Backbone.Models.Task();
        task.set('name', name);
        this.tasks.add(task);
        return this.render();
      }
    };

    TodoListView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        tasks: this.tasks.models
      }));
      this.renderSubViews();
      return this;
    };

    TodoListView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return TodoListView;

  })(Backbone.Diorama.NestingView);

  window.Backbone || (window.Backbone = {});

  (_base7 = window.Backbone).Views || (_base7.Views = {});

  Backbone.Views.TodoItemView = (function(_super) {
    __extends(TodoItemView, _super);

    function TodoItemView() {
      this.setCompleted = __bind(this.setCompleted, this);
      this.render = __bind(this.render, this);      _ref7 = TodoItemView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    TodoItemView.prototype.template = Handlebars.templates['todo_item.hbs'];

    TodoItemView.prototype.tagName = 'li';

    TodoItemView.prototype.events = {
      "click input": "setCompleted"
    };

    TodoItemView.prototype.initialize = function(options) {
      this.model = options.task;
      this.model.on('change', this.render);
      return this.render();
    };

    TodoItemView.prototype.render = function() {
      this.$el.html(this.template({
        task: this.model.toJSON()
      }));
      return this;
    };

    TodoItemView.prototype.setCompleted = function(event) {
      var isChecked;

      isChecked = $(event.target).is(":checked");
      return this.model.set('completed', isChecked);
    };

    TodoItemView.prototype.onClose = function() {
      return this.model.off('change', this.render);
    };

    return TodoItemView;

  })(Backbone.View);

}).call(this);
